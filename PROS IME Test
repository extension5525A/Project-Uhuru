//This code is in the init.c file
void initialize() {

  int test = imeInitializeAll();
    if(test != 4){
      while(1)
        print("error");
    }

  imeReset(0);
  imeReset(1);
  imeReset(2);
  imeReset(3);
    /*while(1)
      print("done");*/

}

//This is the code in the opcontrol.c
/** @file opcontrol.c
 * @brief File for operator control code
 *
 * This file should contain the user operatorControl() function and any functions related to it.
 *
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/publicdomain/zero/1.0/
 *
 * PROS contains FreeRTOS (http://www.freertos.org) whose source code may be
 * obtained from http://sourceforge.net/projects/freertos/files/ or on request.
 */

#include "main.h"

/*
 * Runs the user operator control code. This function will be started in its own task with the
 * default priority and stack size whenever the robot is enabled via the Field Management System
 * or the VEX Competition Switch in the operator control mode. If the robot is disabled or
 * communications is lost, the operator control task will be stopped by the kernel. Re-enabling
 * the robot will restart the task, not resume it from where it left off.
 *
 * If no VEX Competition Switch or Field Management system is plugged in, the VEX Cortex will
 * run the operator control task. Be warned that this will also occur if the VEX Cortex is
 * tethered directly to a computer via the USB A to A cable without any VEX Joystick attached.
 *
 * Code running in this task can take almost any action, as the VEX Joystick is available and
 * the scheduler is operational. However, proper use of delay() or taskDelayUntil() is highly
 * recommended to give other tasks (including system tasks such as updating LCDs) time to run.
 *
 * This task should never exit; it should end with some kind of infinite loop, even if empty.
 */
void operatorControl() {



	//Motor Ports
	char BS = 1;
	char FL = 2;
	char FR = 3;
	char BL = 4;
	char BR = 5;

	//Sensor Ports
	int sensorFL = 1;
	int sensorFR = 0;
	int sensorBL = 2;
	int sensorBR = 3;

	//Joy Stick
	int ax2 = 0;
	int ax3 = 0;
	int up8 = 0;
	int dn8 = 0;

	//Varibles to store axel positions of motors
	int FLcounts = 0;
	int FRcounts = 0;
	int BLcounts = 0;
	int BRcounts = 0;

	//Varible to hold counts so that the sensor output is delayed and can be read
	int counts = 0;

	while (1) {

			//Updating joystick varibles
			ax2 = joystickGetAnalog(1, 2);
			ax3 = joystickGetAnalog(1, 3);
			up8 = joystickGetDigital(1, 8, JOY_UP);
			dn8 = joystickGetDigital(1, 8, JOY_DOWN);

			//Setting drive train motors
			motorSet(FL, ax3);
			motorSet(BL, ax3);
			motorSet(FR, -ax2);
			motorSet(BR, -ax2);


			//Setting bar spinning motor
			if(up8){

				motorSet(BS, 30);
			}else if(dn8){

				motorSet(BS, -30);
			}else{

				motorSet(BS, 0);
			}

			//Change axel position varibles
    	imeGet(sensorFL, &FLcounts);
			imeGet(sensorFR, &FRcounts);
			imeGet(sensorBL, &BLcounts);
			imeGet(sensorBR, &BRcounts);

			//This count delays how often the sensor outputs so it can be read
			if(counts == 3000){
				//Prints out the axel position varibles
				printf("FL: %d\n", FLcounts);
				printf("FR: %d\n", FRcounts);
				printf("BL: %d\n", BLcounts);
				printf("BR: %d\n", BRcounts);
				counts = 0;
			}

			counts ++;
  }//While


}//End of method
